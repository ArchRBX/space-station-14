using Content.Client.UserInterface.Controls;
using Content.Shared.Pinpointer;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Pinpointer.UI;

[GenerateTypedNameReferences]
public sealed partial class NavMapBeaconWindow : FancyWindow
{
    private string? _defaultLabel;
    private bool _defaultEnabled;
    private Color _defaultColor;
    private bool _defaultBroadcast;

    public event Action<string?, bool, Color, bool>? OnApplyButtonPressed;

    public NavMapBeaconWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        VisibleButton.OnPressed += args => UpdateVisibleButton(args.Button.Pressed);
        LabelLineEdit.OnTextChanged += OnTextChanged;
        ColorSelector.OnColorChanged += _ => TryEnableApplyButton();
        BroadcastButton.OnPressed += args => UpdateBroadcastButton(args.Button.Pressed);

        TryEnableApplyButton();
        ApplyButton.OnPressed += OnApplyPressed;
    }

    public void SetEntity(EntityUid uid, NavMapBeaconComponent navMap)
    {
        _defaultLabel = navMap.Text;
        _defaultEnabled = navMap.Enabled;
        _defaultColor = navMap.Color;
        _defaultBroadcast = navMap.ShowIFF;

        UpdateVisibleButton(navMap.Enabled);
        LabelLineEdit.Text = navMap.Text ?? string.Empty;
        ColorSelector.Color = navMap.Color;
        UpdateBroadcastButton(navMap.ShowIFF);
    }

    private void UpdateVisibleButton(bool value)
    {
        VisibleButton.Pressed = value;
        VisibleButton.Text = Loc.GetString(value
            ? "nav-beacon-toggle-visible"
            : "nav-beacon-toggle-invisible");

        TryEnableApplyButton();
    }

    private void UpdateBroadcastButton(bool value)
    {
        BroadcastButton.Pressed = value;
        BroadcastButton.Text = Loc.GetString(value
            ? "nav-beacon-toggle-broadcast-on"
            : "nav-beacon-toggle-broadcast-off");

        TryEnableApplyButton();
    }

    private void OnTextChanged(LineEdit.LineEditEventArgs obj)
    {
        if (obj.Text.Length > HumanoidCharacterProfile.MaxNameLength)
            obj.Control.Text = obj.Text.Substring(0, HumanoidCharacterProfile.MaxNameLength);

        TryEnableApplyButton();
    }

    private void TryEnableApplyButton()
    {
        ApplyButton.Disabled = LabelLineEdit.Text == (_defaultLabel ?? string.Empty) &&
                               VisibleButton.Pressed == _defaultEnabled &&
                               ColorSelector.Color == _defaultColor &&
                               BroadcastButton.Pressed == _defaultBroadcast;
    }

    private void OnApplyPressed(BaseButton.ButtonEventArgs obj)
    {
        _defaultLabel = LabelLineEdit.Text == string.Empty ? null : LabelLineEdit.Text;
        _defaultEnabled = VisibleButton.Pressed;
        _defaultColor = ColorSelector.Color;
        _defaultBroadcast = BroadcastButton.Pressed;
        OnApplyButtonPressed?.Invoke(_defaultLabel, _defaultEnabled, _defaultColor, _defaultBroadcast);
        TryEnableApplyButton();
    }
}
